import configparser


# CONFIG
config = configparser.ConfigParser()
config.read('dwh.cfg')

# DROP TABLES

staging_events_table_drop = "DROP TABLE IF EXISTS STG_EVENT"
staging_songs_table_drop = "DROP TABLE IF EXISTS STG_SONG"
songplay_table_drop = "DROP TABLE IF EXISTS FACT_SONGPLAY"
user_table_drop = "DROP TABLE IF EXISTS DIM_USER"
song_table_drop = "DROP TABLE IF EXISTS DIM_SONG"
artist_table_drop = "DROP TABLE IF EXISTS DIM_ARTIST"
time_table_drop = "DROP TABLE IF EXISTS DIM_TIME"

# CREATE TABLES

staging_events_table_create= ("""create table STG_EVENT (
"artist" character varying(200) ,
"auth" character varying(15) ,
"firstName" character varying(20) ,
"gender" character varying(5) ,
"itemInSession" integer ,
"lastName" character varying(20) ,
"length" Double precision ,
"level" character varying(10) ,
"location" character varying(50) , 
"method" character varying(10) ,
"page" character varying(20) ,
"registeration" character varying(20) ,
"sessionId" integer ,
"song" character varying(200) ,
"status" integer  ,
"ts" BIGINT ,
"userAgent" character varying(200) ,
"userId" integer 
) 
""")

staging_songs_table_create = ("""create table STG_SONG(
"num_songs" integer ,
"artist_id" character varying(50) ,
"artist_latitude" character varying(200),
"artist_longitude" character varying(200),
"artist_location" character varying(200),
"artist_name" character varying(200) ,
"song_id" character varying(50)  ,
"title" character varying(200) ,
"duration" double precision,
"year" integer
)
""")

songplay_table_create = ("""create table FACT_SONGPLAY(
songplay_id BIGINT GENERATED BY DEFAULT AS IDENTITY(1, 1)  NOT NULL primary key,
start_time BIGINT NOT NULL ,
user_id integer NOT NULL,
level character varying(10) ,
song_id character varying(50) NOT NULL, 
artist_id character varying(50) NOT NULL,
session_id integer ,
location character varying(50) ,
user_agent character varying(200) 
)
""")

user_table_create = ("""create table DIM_USER(
user_id integer NOT NULL primary key,
first_name character varying(20) ,
last_name character varying(20) ,
gender character varying(5) ,
level character varying(10) 
) 
""")

song_table_create = ("""create table DIM_SONG(
song_id character varying(50) NOT NULL primary key  ,
title character varying(200) ,
artist_id character varying(50) ,
year integer,
duration  double precision
) 
""")

artist_table_create = ("""create table DIM_ARTIST(
artist_id character varying(50) NOT NULL primary key,
name character varying(200) ,
location character varying(200) ,
lattitude character varying(200),
longitude character varying(200)
)
""")

time_table_create = ("""create table DIM_TIME(
start_time  TIMESTAMP NOT NULL primary key,
hour integer ,
day integer ,
week integer ,
month integer ,
year integer ,
weekday character varying(10) 
)
""")

# STAGING TABLES

staging_events_copy = ("""copy STG_EVENT ("artist", "auth" ,"firstName" ,"gender" ,"itemInSession" ,"lastName","length"   ,"level" ,"location" ,"method" ,"page" ,"registeration" ,"sessionId" ,"song" ,"status" ,"ts" ,"userAgent" ,"userId" )
from {}
    credentials 'aws_iam_role={}'
    region 'us-west-2'
    BLANKSASNULL
    EMPTYASNULL
    TRIMBLANKS
    JSON  {};
""").format(config['S3']['LOG_DATA'],config['IAM_ROLE']['ARN'],config['S3']['LOG_JSONPATH'])

staging_songs_copy = ("""copy STG_SONG("num_songs" ,"artist_id" ,"artist_latitude" ,"artist_longitude" ,"artist_location" ,"artist_name","song_id" ,"title" ,"duration" ,"year" ) 
from {}
    credentials 'aws_iam_role={}'
    region 'us-west-2'
    BLANKSASNULL
    EMPTYASNULL
    TRIMBLANKS
   format as json 'auto';
""").format(config['S3']['SONG_DATA'],config['IAM_ROLE']['ARN'])

# FINAL TABLES

songplay_table_insert = ("""Insert into FACT_SONGPLAY 
(start_time,user_id,level,song_id,artist_id,session_id,location, user_agent)
select  ts as start_time,userId as user_id,level,S.song_id as song_id,s.artist_id,sessionId as session_id,ev.location,userAgent as user_agent
from STG_EVENT EV
INNER JOIN STG_SONG S ON EV.SONG=S.TITLE
WHERE EV.PAGE='NextSong'
AND ts IS NOT NULL 
AND userId IS NOT NULL
AND S.SONG_ID IS NOT NULL
AND S.ARTIST_ID IS NOT NULL
""")

user_table_insert = (""" 
Create temp table  DIM_USER_STAGING as 
select distinct userId as user_id,firstName as first_name,lastName as last_name,gender , level 
from STG_EVENT where userId is not null;


begin transaction;


update DIM_USER
set first_name = DIM_USER_STAGING.first_name,
last_name = DIM_USER_STAGING.last_name,
gender = DIM_USER_STAGING.gender,
level = DIM_USER_STAGING.level
from DIM_USER_STAGING
where DIM_USER.user_id = DIM_USER_STAGING.user_id
and (
DIM_USER.first_name != DIM_USER_STAGING.first_name
or DIM_USER.last_name != DIM_USER_STAGING.last_name
or DIM_USER.gender != DIM_USER_STAGING.gender
or DIM_USER.level != DIM_USER_STAGING.level);
 


delete from DIM_USER_STAGING
using DIM_USER
where DIM_USER.user_id = DIM_USER_STAGING.user_id;


insert into DIM_USER
select * from DIM_USER_STAGING;


end transaction;


drop table DIM_USER_STAGING;
""")

song_table_insert = ("""
Create temp table  DIM_SONG_STAGING as 
select distinct song_id ,title,artist_id ,year ,duration
from STG_SONG WHERE SONG_ID IS NOT NULL;


begin transaction;


update DIM_SONG
set 
title = DIM_SONG_STAGING.title,
artist_id = DIM_SONG_STAGING.artist_id,
year = DIM_SONG_STAGING.year,
duration = DIM_SONG_STAGING.duration
from DIM_SONG_STAGING
where DIM_SONG.song_id = DIM_SONG_STAGING.song_id
and (
DIM_SONG.title != DIM_SONG_STAGING.title
or DIM_SONG.artist_id != DIM_SONG_STAGING.artist_id
or DIM_SONG.year != DIM_SONG_STAGING.year
or DIM_SONG.duration != DIM_SONG_STAGING.duration);
 


delete from DIM_SONG_STAGING
using DIM_SONG
where DIM_SONG.song_id = DIM_SONG_STAGING.song_id;


insert into DIM_SONG
select * from DIM_SONG_STAGING;


end transaction;


drop table DIM_SONG_STAGING;

""")

artist_table_insert = ("""
Create temp table  DIM_ARTIST_STAGING as 
select distinct artist_id,artist_name as name,artist_location as location,artist_latitude as lattitude,artist_longitude as longitude
from STG_SONG WHERE artist_id IS NOT NULL;


begin transaction;


update DIM_ARTIST
set 
name = DIM_ARTIST_STAGING.name,
location = DIM_ARTIST_STAGING.location,
lattitude = DIM_ARTIST_STAGING.lattitude,
longitude = DIM_ARTIST_STAGING.longitude
from DIM_ARTIST_STAGING
where DIM_ARTIST.artist_id = DIM_ARTIST_STAGING.artist_id
and (
DIM_ARTIST.name != DIM_ARTIST_STAGING.name
or DIM_ARTIST.location != DIM_ARTIST_STAGING.location
or DIM_ARTIST.lattitude != DIM_ARTIST_STAGING.lattitude
or DIM_ARTIST.longitude != DIM_ARTIST_STAGING.longitude);
 


delete from DIM_ARTIST_STAGING
using DIM_ARTIST
where DIM_ARTIST.artist_id = DIM_ARTIST_STAGING.artist_id;


insert into DIM_ARTIST
select * from DIM_ARTIST_STAGING;


end transaction;


drop table DIM_ARTIST_STAGING;
""")

time_table_insert = ("""
Create temp table  DIM_TIME_STAGING as 
SELECT a.start_time,
EXTRACT (HOUR FROM a.start_time) as hour, EXTRACT (DAY FROM a.start_time) as day,
EXTRACT (WEEK FROM a.start_time) as week, EXTRACT (MONTH FROM a.start_time) as month,
EXTRACT (YEAR FROM a.start_time) as year, EXTRACT (WEEKDAY FROM a.start_time) as weekday FROM
(SELECT TIMESTAMP 'epoch' + start_time/1000 *INTERVAL '1 second' as start_time FROM FACT_SONGPLAY) a WHERE a.start_time IS NOT NULL;



begin transaction;


delete from DIM_TIME_STAGING
using DIM_TIME
where DIM_TIME.start_time = DIM_TIME_STAGING.start_time;


insert into DIM_TIME
select * from DIM_TIME_STAGING;


end transaction;


drop table DIM_TIME_STAGING;
""")

# QUERY LISTS

create_table_queries = [staging_events_table_create, staging_songs_table_create, songplay_table_create, user_table_create, song_table_create, artist_table_create, time_table_create]
drop_table_queries = [staging_events_table_drop, staging_songs_table_drop, songplay_table_drop, user_table_drop, song_table_drop, artist_table_drop, time_table_drop]
copy_table_queries = [staging_events_copy, staging_songs_copy]
insert_table_queries = [songplay_table_insert, user_table_insert, song_table_insert, artist_table_insert, time_table_insert]
